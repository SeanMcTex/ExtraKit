#!/usr/bin/env xcrun --sdk macosx swift

// genswift --fonts-dir ./ --fonts-src Fonts.swift --fonts-enum Fonts --info-plist Info.plist

import Foundation
import Cocoa

var outputString = """
// autogenerated by genswiftfonts.swift

import Foundation
import ExtraKit


"""

let regex = try? NSRegularExpression(pattern: "[-\\s]")

extension String {
	func enumName() -> String {
		return regex?.stringByReplacingMatches(in: self, range: NSRange(location: 0, length: count), withTemplate: "").uncapitalized() ?? ""
	}
	func uncapitalized() -> String {
		return replacingCharacters(in: startIndex..<index(startIndex, offsetBy:1), with: self[startIndex...startIndex].lowercased())
	}
}

func generateFontEnum(_ path: String) {
	if let dataProvider = CGDataProvider(filename: UnsafePointer((path as NSString).utf8String!)) {
		let cgFont = CGFont(dataProvider)!
		let font = CTFontCreateWithGraphicsFont(cgFont, 10, nil, nil) as NSFont
		let fontName = font.fontName
		let enumName = fontName.enumName()
		outputString += "\tcase \(enumName)"
		outputString += " = \"\(fontName)\""
		outputString += "\n"
	}
}

let outputPath = CommandLine.arguments[1]
let enumName = CommandLine.arguments[2]
let fontDir = CommandLine.arguments[3]
let infoPlist = CommandLine.arguments[4]

outputString += """
/**
	Generated from UIAppFonts in Info.plist and NSFont.fontName.
	Usage: \(enumName).<font>.font(size: <size>)
*/

"""

if let appFonts = (NSDictionary(contentsOfFile: infoPlist) as? [String: Any])?["UIAppFonts"] as? [String] {
	outputString += "enum \(enumName): String, FontRepresentable {\n\n"
	appFonts.forEach {
		generateFontEnum("\(fontDir)/\($0)")
	}
	outputString += "}\n"
}

try? outputString.write(toFile:outputPath, atomically: true, encoding: String.Encoding.utf8)
