#!/usr/bin/env xcrun --sdk macosx swift

import Foundation

let outputPath = Process.arguments[1]

var tabs = 0

extension String {
	mutating func addLine(line: String = "") {
		
		if line.characters.last == "}" {
			tabs -= 1
		}
		if tabs > 0 {
			self += String(count: tabs, repeatedValue: Character("\t"))
		}

		self += "\(line)\n"

		if line.characters.last == "{" {
			tabs += 1
		}
	}
}

var outputString = ""

outputString.addLine("// autogenerated by genswiftstoryboards.swift")
outputString.addLine("")
outputString.addLine("import UIKit")
outputString.addLine("import ExtraKit\n")

func generateStoryboardIdentifierSourceFile(path: String) {
	
	let url = NSURL(fileURLWithPath: path)
	let doc = try! NSXMLDocument(contentsOfURL: url, options: 0)
	guard var vcs = try? doc.nodesForXPath("//viewController") as? [NSXMLElement] ?? [NSXMLElement]() else {
		return
	}
	if let tvcs = try? doc.nodesForXPath("//tableViewController") as? [NSXMLElement] ?? [NSXMLElement]() {
		vcs.appendContentsOf(tvcs)
	}
	
	let ids: [(storyboardIdentifier: String, id: String, segues: [String])]! = vcs.flatMap { vc in
		if let storyboardIdentifier = vc.attributeForName("storyboardIdentifier")?.stringValue
		, id = vc.attributeForName("id")?.stringValue {
			var segues = [String]()
			if let segueNodes = try? vc.nodesForXPath(".//segue") {
				segueNodes.forEach {
					if let elem = ($0 as? NSXMLElement)
					, identifier = elem.attributeForName("identifier")?.stringValue
					where !identifier.isEmpty {
						segues.append(identifier)
					}
				}
			}
			return (storyboardIdentifier,id, segues)
		}
		return nil
	}
	guard ids.isEmpty == false else { return }
	
	let fileName = url.URLByDeletingPathExtension!.lastPathComponent!
	
	outputString.addLine("struct \(fileName) {")
	outputString.addLine()
	
	ids.forEach {
		outputString.addLine("struct \($0.storyboardIdentifier): StoryboardScene {")

		if !$0.segues.isEmpty {
			outputString.addLine("enum Segues: String, StoryboardSceneSegue {")
			$0.segues.forEach { segue in
				outputString.addLine("case \(segue)")
			}
			outputString.addLine("}")
		}
		outputString.addLine("let identifier = (\"\($0.storyboardIdentifier)\", \"\(fileName)\")")
		outputString.addLine("}")
	}

	outputString.addLine("}")
	outputString.addLine()
}
outputString.addLine("struct Storyboards {")
outputString.addLine("")
Process.arguments[2..<Process.arguments.count].forEach {
	generateStoryboardIdentifierSourceFile($0)
}
outputString.addLine("}")

try! outputString.writeToFile(outputPath, atomically: true, encoding: NSUTF8StringEncoding)
