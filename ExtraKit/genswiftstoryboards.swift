#!/usr/bin/env xcrun --sdk macosx swift

import Foundation

let outputPath = Process.arguments[1]

extension String {
	mutating func addLine(line: String = "", tabs: Int = 0) {
		if tabs > 0 {
			self += String(count: tabs, repeatedValue: Character("\t"))
		}
		self += "\(line)\n"
	}
}

var outputString = ""

outputString.addLine("// autogenerated by genswiftstoryboards.swift")
outputString.addLine("")
outputString.addLine("import UIKit")
outputString.addLine("import ExtraKit\n")

func generateStoryboardIdentifierSourceFile(path: String) {
	
	let url = NSURL(fileURLWithPath: path)
	let doc = try! NSXMLDocument(contentsOfURL: url, options: 0)
	let vcs = try! doc.nodesForXPath("//viewController") as! [NSXMLElement]
	
	let ids: [(storyboardIdentifier: String, id: String, segues: [String])]! = vcs.flatMap { vc in
		if let storyboardIdentifier = vc.attributeForName("storyboardIdentifier")?.stringValue
		, id = vc.attributeForName("id")?.stringValue {
			var segues = [String]()
			if let segueNodes = try? vc.nodesForXPath(".//segue") {
				segueNodes.forEach {
					if let elem = ($0 as? NSXMLElement)
					, identifier = elem.attributeForName("identifier")?.stringValue
					where !identifier.isEmpty {
						segues.append(identifier)
					}
				}
			}
			return (storyboardIdentifier,id, segues)
		}
		return nil
	}
	guard ids.isEmpty == false else { return }
	
	let fileName = url.URLByDeletingPathExtension!.lastPathComponent!
	
	outputString.addLine("enum \(fileName)Storyboard: String, StoryboardScene {")
	
	outputString.addLine()
	
	ids.forEach {
		outputString.addLine("case \($0.storyboardIdentifier)", tabs: 1)
	}
	
	let segues = ids.filter { !$0.segues.isEmpty }
	if segues.isEmpty == false {
		outputString.addLine()
		segues.forEach { sb in
			outputString.addLine("enum \(sb.storyboardIdentifier)Segues: String, StoryboardSceneSegue {", tabs: 1)
			sb.segues.forEach {
				outputString.addLine("case \($0)", tabs:2)
			}
			outputString.addLine("}", tabs: 1)
		}
	}
	outputString.addLine()
	
	outputString.addLine("var storyboardName: String {", tabs: 1)
	outputString.addLine(" return \"\(fileName)\"", tabs: 2)
	outputString.addLine("}", tabs: 1)

	outputString.addLine("}")
	outputString.addLine()
}

Process.arguments[2..<Process.arguments.count].forEach {
	generateStoryboardIdentifierSourceFile($0)
}


try! outputString.writeToFile(outputPath, atomically: true, encoding: NSUTF8StringEncoding)
